{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f6\fnil\fprq2\fcharset0 Mangal;}{\f7\fnil\fprq0\fcharset128 Mangal;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033 Normal;}
{\s1\sbasedon15\snext1\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading 1;}
{\s2\sbasedon15\snext2\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading 2;}
{\s3\sbasedon15\snext3\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading 3;}
{\s15\sbasedon0\snext16\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\sb0\sa140 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\sb0\sa140\dbch\af7 List;}
{\s18\sbasedon0\snext18\sb120\sa120\noline\i\dbch\af7\afs24\ai\fs24 Caption;}
{\s19\sbasedon0\snext19\noline\dbch\af7 Index;}
{\s20\sbasedon0\snext20 Quotations;}
{\s21\sbasedon15\snext21\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Title;}
{\s22\sbasedon15\snext22\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Subtitle;}
}{\*\generator LibreOffice/5.0.0.5$Windows_x86 LibreOffice_project/1b1a90865e348b492231e1c451437d7a15bb262b}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2018\mo4\dy24\hr22\min49}{\printim\yr0\mo0\dy0\hr0\min0}}\deftab709
\viewscale110
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
pragma solidity ^0.4.21;\line contract BettingParticipant \{\line     \line     address admin;\line     uint counter;\line     struct Participant \{\line         address addr;\line         uint id1;\line         string name;\line         string email;\line         uint phone;\line     \} \line     address[] addrList;\line     mapping (address => Participant) Participants;\line     \line     struct Fixture \{\line         uint matchNum;\line         string matchTitle;\line         uint matchDate;\line         string winner;\line         bool matchDrawn;\line     \}\line     Fixture[] MatchFixtures;\line     \line     function BettingParticipant() public \{\line         admin = msg.sender;\line         counter = 0;\line     \}\line     modifier adminOnly() \{\line         require(msg.sender == admin);\line         _;\line     \}\line     function registerParticipant(string _name,\line     string _email, uint _phone) public payable\{\line         \line         if(Participants[msg.sender].addr != 0 || msg.value != 10)\{\line             revert();\line         \}\line         for(uint i=0; i<addrList.length; i++)\{\line             if(addrList[i] == msg.sender)\{\line                 revert();\line             \}\line         \}\line         \line         Participant memory participant;\line         participant.addr = msg.sender;\line         participant.name = _name;\line         participant.email = _email;\line         participant.phone = _phone;\line         addrList[counter] = msg.sender;\line         counter++;\line         participant.id1 = counter;\line         \line         Participants[msg.sender] = participant;\line     \}\line     \line     function addFixture(uint _matchNum, string _matchTitle, uint _matchDate) \line              public adminOnly returns(bool)\{\line                  for(uint i=0;i<MatchFixtures.length;i++) \{\line                      if(MatchFixtures[i].matchNum == _matchNum || \line                         keccak256(MatchFixtures[i].matchTitle) == keccak256(_matchTitle)) \{\line                          revert();\line                      \}\line                  \}\line                  \line                  Fixture memory fixture = Fixture(\{matchNum: _matchNum,\line                                          matchTitle: _matchTitle,\line                                          matchDate: _matchDate,\line                                          winner: ' ',\line                                          matchDrawn: false\});\line                                          \line                  MatchFixtures.push(fixture);\line                  return true;\line     \}\line     function modifyFixture(uint _matchNum, string _matchTitle, uint _matchDate) public adminOnly returns(bool)\{\line         bool fixtureExists;\line         for(uint i=0;i<MatchFixtures.length;i++) \{\line                      if(MatchFixtures[i].matchNum == _matchNum ) \{\line                          fixtureExists = true;\line                          MatchFixtures[i].matchTitle = _matchTitle;\line                          MatchFixtures[i].matchDate = _matchDate;\line                      \}\line         \}\line         if(fixtureExists == false)\line             return false;\line         else\line             return true;\line     \}\line     \line     function updateResult(uint _matchNum, string _matchTitle, string _winner) public adminOnly returns(bool)\{\line         bool fixtureExists;\line         for(uint i=0;i<MatchFixtures.length;i++) \{\line                      if(MatchFixtures[i].matchNum == _matchNum && \line                         keccak256(MatchFixtures[i].matchTitle) == keccak256(_matchTitle)) \{\line                          fixtureExists = true;\line                          if(keccak256(_winner) != keccak256(' ')) \{\line                             MatchFixtures[i].winner = _winner;\line                             MatchFixtures[i].matchDrawn = false;\line                          \}\line                          else \{\line                             MatchFixtures[i].winner = ' ';\line                             MatchFixtures[i].matchDrawn = true;  \line                          \}\line                          \line                      \}\line         \}\line         if(fixtureExists == false)\line             return false;\line         else\line             return true;\line     \}\line \}}
\par }